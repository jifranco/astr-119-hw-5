{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Let's use the trapezoid method, simpson's method, and romberg integration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(x):\n",
    "    a = math.exp(-2*x)\n",
    "    b = math.cos(10*x)\n",
    "    return a*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_integral(x):\n",
    "    a = math.exp(-2*x)\n",
    "    b = math.cos(10*x)\n",
    "    return (-(b + 5*math.sin(10*x)) / 52*math.exp(2*x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezoid_core(f,x,h):\n",
    "    return 0.5*h*( f(x+h) +f(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezoid_method(f,a,b,N):\n",
    "    x = np.linspace(a,b,N)\n",
    "    h = x[1]=x[0]\n",
    "    Fint = 0.0\n",
    "    for i in range(0,len(x)-1,1):\n",
    "        Fint += trapezoid_core(f,x[i],h)\n",
    "    return Fint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpson_core(f,x,h):\n",
    "    return h*( f(x) + 4*f(x+h) + f(x+2*h))/3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpsons_method(f,a,b,N):\n",
    "    x = np.linspace(a,b,N)\n",
    "    h = x[1]-x[0]\n",
    "    Fint = 0.0\n",
    "    for i in range(0,len(x)-2,2):\n",
    "        Fint += simpson_core(f,x[1],h)\n",
    "    if((N%2)==0):\n",
    "        Fint += simpson_core(f,x[-2],0.5*h)\n",
    "    return Fint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "def romberg_core(f,a,b,i):\n",
    "    h = b-a\n",
    "    dh = h/2.**(i)\n",
    "    K = h/2.**(i+1)\n",
    "    M = 0.0\n",
    "    for j in range(2**i):\n",
    "        M += f(a + 0.5*dh + j*dh)\n",
    "    return K*M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "def romberg_integration(f,a,b,tol):\n",
    "    i = 0\n",
    "    imax = 1000\n",
    "    delta = 100.0*np.fabs(tol)\n",
    "    I = np.zeros(imax,dtype=float)\n",
    "    I[0] = 0.5*(b-a)*(f(a) + f(b))\n",
    "    i += 1\n",
    "    while(delta>tol):\n",
    "        I[i] = 0.5*I[i-1] + romberg_core(f,a,b,i)\n",
    "        delta = np.fabs( (I[i]-I[i-1])/I[i] )\n",
    "        print(i,I[i],I[i-1],delta)\n",
    "        if(delta>tol):\n",
    "            i+=1\n",
    "            if(i>imax):\n",
    "                print(\"Max iterations reached.\")\n",
    "                raise StopIteration('Stopping iteration')\n",
    "    return I[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5249799833881165\n",
      "Trapezoid\n",
      "0.0\n",
      "Simpson's Method\n",
      "-0.26840850028348834\n",
      "Romberg\n",
      "1 0.11946766131901145 0.4432220084783303 2.70997476291769\n",
      "2 0.060811946494693916 0.11946766131901145 0.9645426302780075\n",
      "3 0.03649466375563151 0.060811946494693916 0.6663243399607974\n",
      "4 0.025166949899448742 0.03649466375563151 0.45010276976118163\n",
      "5 0.01969035751806674 0.025166949899448742 0.2781357512862321\n",
      "6 0.016997673593145184 0.01969035751806674 0.1584148507244816\n",
      "7 0.01566266057717022 0.016997673593145184 0.08523539212238751\n",
      "8 0.014997981690630852 0.01566266057717022 0.04431788891665263\n",
      "9 0.014666348864544723 0.014997981690630852 0.022611819011603952\n",
      "10 0.014500709087790525 0.014666348864544723 0.011422874271277198\n",
      "11 0.014417933357360257 0.014500709087790525 0.005741164727191093\n",
      "12 0.014376556531561556 0.014417933357360257 0.0028780762422395546\n",
      "13 0.01435587087851195 0.014376556531561556 0.0014409194137130136\n",
      "14 0.014345528741949082 0.01435587087851195 0.0007209310126455115\n",
      "15 0.014340357846158142 0.014345528741949082 0.00036058345589510665\n",
      "16 0.014337772441385456 0.014340357846158142 0.00018032123073892373\n",
      "17 0.01433647974977972 0.014337772441385456 9.016799300093485e-05\n",
      "18 0.014335833406671748 0.01433647974977972 4.50858411671949e-05\n",
      "19 0.014335510235792513 0.014335833406671748 2.2543381708694205e-05\n",
      "20 0.014335348650519254 0.014335510235792513 1.1271806301905477e-05\n",
      "21 0.014335267857928916 0.014335348650519254 5.635931685342369e-06\n",
      "22 0.014335227461638966 0.014335267857928916 2.8179734195617474e-06\n",
      "23 0.014335207263496658 0.014335227461638966 1.4089885089719322e-06\n",
      "24 0.014335197164426737 0.014335207263496658 7.04494664759245e-07\n",
      "0.014335197164426737 -0.9726938214445621 1e-06\n"
     ]
    }
   ],
   "source": [
    "Answer = func_integral(1)-func_integral(0)\n",
    "print(Answer)\n",
    "print(\"Trapezoid\")\n",
    "print(trapezoid_method(func,0,1,10))\n",
    "print(\"Simpson's Method\")\n",
    "print(simpsons_method(func,0,1,10))\n",
    "print(\"Romberg\")\n",
    "tolerance = 1.0e-6\n",
    "RI = romberg_integration(func,0,1,tolerance)\n",
    "print(RI, (RI-Answer)/Answer, tolerance)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
